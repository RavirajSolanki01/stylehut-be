// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma init  => init the prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model users {
  id           Int      @id @default(autoincrement()) // Primary key
  first_name   String?  @db.VarChar(30)              // First name (optional)
  last_name    String?  @db.VarChar(30)              // Last name (optional)
  profile_url  String?  @db.VarChar(255)             // Profile URL (optional)
  email        String   @unique                      // Unique email (required)
  role_id      Int?                                  // Foreign key for Role (optional)
  is_approved  Boolean  @default(false)              // Add approval status
  mobile       String?  @db.VarChar(10)              // Mobile number (optional)
  gender_id    Int?                                  // Foreign key for Gender (optional)
  birth_date   String?                               // Birth date (optional)
  otp          String?                               // Store OTP temporarily
  otp_verified Boolean  @default(false)              // OTP verified status
  create_at    DateTime @default(now())              // Timestamp when created
  updated_at   DateTime @updatedAt                   // Auto-updated timestamp
  is_deleted   Boolean  @default(false)              // Soft delete flag
  ratings      ratings[]

  //relations
  role         role? @relation(fields: [role_id], references: [id])
  gender       gender? @relation(fields: [gender_id], references: [id])
  wishlist     wishlist[]
  address      address[]
  cart         cart[]
  orders       orders[]
  

  coupon_usage coupon_usage[]
}

enum AddressType {
  HOME
  OFFICE
}

model address {
  id                  Int           @id @default(autoincrement())
  user_id             Int
  full_name           String        @db.VarChar(100)
  phone               String        @db.VarChar(15)
  address_line1       String        @db.VarChar(255)
  address_line2       String?       @db.VarChar(255)
  city                String        @db.VarChar(100)
  state               String        @db.VarChar(100)
  postal_code         String        @db.VarChar(20)
  is_default          Boolean       @default(false)
  address_type        AddressType   @default(HOME)
  is_open_saturday    Boolean?      @default(false)
  is_open_sunday      Boolean?      @default(false)

  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  is_deleted          Boolean       @default(false)

  // Relations
  user                users         @relation(fields: [user_id], references: [id])
  shipping_orders     orders[]      @relation("ShippingAddress")
  billing_orders      orders[]      @relation("BillingAddress")

  @@index([user_id])
  @@index([address_type]) 
}

model category {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(30)
  description  String   @db.VarChar(100)
  create_at    DateTime @default(now())
  updated_at   DateTime @updatedAt
  is_deleted   Boolean  @default(false)

  //Relations
  sub_categories       sub_category[]
  sub_category_types   sub_category_type[]
  products             products[]
}

model sub_category {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(30)
  description  String   @db.VarChar(100)
  create_at    DateTime @default(now())
  updated_at   DateTime @updatedAt
  is_deleted   Boolean  @default(false)
  category_id  Int

  // Relations
  category             category @relation(fields: [category_id], references: [id])
  sub_category_types   sub_category_type[]
  products             products[]
}

model sub_category_type {
  id           Int      @id @default(autoincrement()) 
  name         String   @db.VarChar(30)
  description  String   @db.VarChar(100)
  category_id  Int
  sub_category_id Int
  create_at    DateTime @default(now())
  updated_at   DateTime @updatedAt
  is_deleted   Boolean  @default(false)

  // Relations
  category             category @relation(fields: [category_id], references: [id])
  sub_category         sub_category @relation(fields: [sub_category_id], references: [id])
  products             products[]
}

model brand {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(30)
  description  String   @db.VarChar(100)
  create_at    DateTime @default(now())
  updated_at   DateTime @updatedAt
  is_deleted   Boolean  @default(false)

  //Relations
  products             products[]
}

model gender {
  id           Int      @id @default(autoincrement())
  name         String   @unique @db.VarChar(30)
  create_at    DateTime @default(now())
  updated_at   DateTime @updatedAt
  is_deleted   Boolean  @default(false)

  users users[]
}

model role {
  id           Int      @id @default(autoincrement())
  name         String   @unique @db.VarChar(30)
  create_at    DateTime @default(now())
  updated_at   DateTime @updatedAt
  is_deleted   Boolean  @default(false)

  users users[]
}

model products {
  id                          Int      @id @default(autoincrement())  //Primary key
  name                        String   @db.VarChar(30)
  description                 String   @db.VarChar(100)
  image                       String[]
  price                       Decimal
  discount                    Int?
  custom_product_id           String?
  // quantity                    Int
  category_id                 Int                                    //foreign key
  sub_category_id             Int                                    //foreign key
  sub_category_type_id        Int                                    //foreign key
  brand_id                    Int                                    //foreign key
  size_quantity_id            Int?                                   //foreign key
  create_at                   DateTime @default(now())
  updated_at                  DateTime @updatedAt
  is_deleted                  Boolean  @default(false)
  is_featured                 Boolean  @default(false)
  views_count                 Int      @default(0)
  variant_id                  String?
  is_main_product             Boolean  @default(true)
  // Relations
  category             category @relation(fields: [category_id], references: [id])
  sub_category         sub_category @relation(fields: [sub_category_id], references: [id])
  sub_category_type    sub_category_type @relation(fields: [sub_category_type_id], references: [id])
  brand                brand @relation(fields: [brand_id], references: [id])
  ratings              ratings[]
  wishlist             wishlist[]
  cart_items           cart_items[]
  order_items          order_items[]
  // size_quantity        size_quantity? @relation(fields: [size_quantity_id], references: [id])
  size_quantities        size_quantity[]

  @@index([category_id])
  @@index([brand_id])
  @@index([is_deleted])
}
model size_quantity {
  id                Int @id @default(autoincrement())
  quantity          Int
  price             Decimal? @default(0)
  discount          Decimal? @default(0)  
  product_id        Int?
  custom_product_id String?
  variant_id        Int?
  size_id           Int
  create_at         DateTime @default(now())
  updated_at        DateTime @updatedAt
  is_deleted        Boolean  @default(false)

  // Relations
  size_data         size_data @relation(fields: [size_id], references: [id])

  products products[]
}
model size_data {
  id Int @id @default(autoincrement())
  size String
  name String
  create_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean @default(false)  

  size_quantity size_quantity[]
}

model ratings {
  id                          Int             @id @default(autoincrement())  //Primary key
  user_id                     Int 
  product_id                  Int
  ratings                     Decimal
  images                      String[]        @default([])
  description                 String          @db.VarChar(100)
  create_at                   DateTime        @default(now())
  updated_at                  DateTime        @updatedAt
  is_deleted                  Boolean         @default(false)

  // Relations
  users             users @relation(fields: [user_id], references: [id])
  products          products @relation(fields: [product_id], references: [id])

  @@index([user_id, product_id])
  @@index([is_deleted])
}


model wishlist {
  id          Int      @id @default(autoincrement())
  user_id     Int                                   
  product_id  Int                                   
  created_at  DateTime @default(now())              
  is_deleted  Boolean  @default(false)              

  // Relations
  users       users @relation(fields: [user_id], references: [id])
  products    products @relation(fields: [product_id], references: [id])

  @@unique([user_id, product_id])
}

enum CartStatus {
  ACTIVE
  ABANDONED
  CONVERTED_TO_ORDER
}

model cart {
  id              Int       @id @default(autoincrement())
  user_id         Int
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  is_deleted      Boolean   @default(false)
  status          CartStatus @default(ACTIVE)

  // Relations
  user            users     @relation(fields: [user_id], references: [id])
  items           cart_items[]

  @@unique([user_id, status, is_deleted])
  @@index([user_id, status])
}

model cart_items {
  id              Int       @id @default(autoincrement())
  cart_id         Int
  product_id      Int
  quantity        Int       @default(1)
  size_id         Int
  color           String?   @db.VarChar(20)  // For items with color variants
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  is_deleted      Boolean   @default(false)

  // Relations
  cart            cart      @relation(fields: [cart_id], references: [id])
  product         products  @relation(fields: [product_id], references: [id])

  @@unique([cart_id, product_id, size_id, color])
  @@index([product_id])
  @@index([size_id])
}

model coupon {
  id Int @id @default(autoincrement())
  code String @db.VarChar(30)
  discount Decimal
  discount_text String @db.VarChar(50)
  min_order_amount Decimal
  max_savings_amount Decimal
  expiry_date DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_active Boolean @default(true)

  // Relations
  coupon_usage coupon_usage[]
}

model coupon_usage {
  id Int @id @default(autoincrement())
  coupon_id Int
  user_id Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean @default(false)

  // Relations
  coupon coupon @relation(fields: [coupon_id], references: [id])
  user users @relation(fields: [user_id], references: [id])
}

model terms_and_conditions {
  id Int @id @default(autoincrement())
  description String @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
model privacy_policy {
  id Int @id @default(autoincrement())
  description String @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}


enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  UPI
  NET_BANKING
  WALLET
  CASH_ON_DELIVERY
}

enum ReturnReason {
  WRONG_SIZE
  DAMAGED_PRODUCT
  DIFFERENT_PRODUCT
  QUALITY_ISSUE
  OTHER
}

// Order related models
model orders {
  id                    Int           @id @default(autoincrement())
  user_id               Int
  order_number          String        @unique // Formatted like MYN-2024-0001
  total_amount          Decimal
  discount_amount       Decimal       @default(0)
  shipping_charge       Decimal       @default(0)
  final_amount          Decimal
  payment_method        PaymentMethod
  payment_status        PaymentStatus @default(PENDING)
  order_status          String   @default("PENDING")
  tracking_number       String?   
  shipping_address_id   Int
  billing_address_id    Int
  expected_delivery     DateTime?
  delivered_at          DateTime?
  cancelled_at          DateTime?
  cancellation_reason   String?       @db.VarChar(255)
  created_at            DateTime      @default(now())
  updated_at            DateTime      @updatedAt
  is_deleted            Boolean       @default(false)

  // Relations
  user                  users         @relation(fields: [user_id], references: [id])
  shipping_address      address       @relation("ShippingAddress", fields: [shipping_address_id], references: [id])
  billing_address       address       @relation("BillingAddress", fields: [billing_address_id], references: [id])
  items                 order_items[]
  timeline              order_timeline[]
  return_request        return_request?

  @@index([user_id])
  @@index([order_number])
  @@index([order_status])
  @@index([payment_status])
  @@index([created_at])
}

model order_items {
  id              Int       @id @default(autoincrement())
  order_id        Int
  product_id      Int
  quantity        Int
  size_id            Int
  color           String?   @db.VarChar(20)
  price           Decimal   // Price at the time of order
  discount        Int?      // Discount at the time of order
  final_price     Decimal   // Final price after discount
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  // Relations
  order           orders    @relation(fields: [order_id], references: [id])
  product         products  @relation(fields: [product_id], references: [id])

  @@index([order_id])
  @@index([product_id])
  @@index([size_id])
}

model order_timeline {
  id              Int       @id @default(autoincrement())
  order_id        Int
  status          String
  comment         String?   @db.VarChar(255)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  // Relations
  order           orders    @relation(fields: [order_id], references: [id])

  @@index([order_id])
}

model return_request {
  id              Int             @id @default(autoincrement())
  order_id        Int             @unique
  reason          ReturnReason
  description     String          @db.VarChar(1024)
  images          String[]      
  status          String          @default("PENDING")
  tracking_number String?
  qc_notes        String?         @db.VarChar(1024)
  qc_status       Boolean?
  refund_id       String?       
  pickup_date     DateTime?
  refund_amount   Decimal?
  refunded_at     DateTime?
  rejection_reason  String?       @db.VarChar(1024)
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt

  // Relations
  order           orders          @relation(fields: [order_id], references: [id])

  @@index([order_id])
}

